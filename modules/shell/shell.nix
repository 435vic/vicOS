{
  pkgs,
  config,
  lib,
  ...
}:
with lib; let
  cfg = config.vicos.shell;
in {
  options = {
    vicos.shell = {
      fish = {
        runByDefault = mkOption {
          type = types.bool;
          default = false;
          description = "Run fish as default interactive shell (but not login shell)";
        };

        extraConfig = mkOption {
          type = types.str;
          default = "";
          description = "Extra configuration to be added in config.post.fish";
        };

        aliases = mkOption {
          type = with types; attrsOf str;
          default = {};
          description = "Aliases to define";
        };
      };

      starship.enable = mkEnableOption "starship prompt";
    };
  };

  config = mkMerge [
    {
      # for better scripting
      programs.fish = {
        enable = mkDefault true;
        # fish 4.0
        package = pkgs.unstable.fish;
      };

      # makes rebuilding a lot faster
      # why fish, why????????
      documentation.man.generateCaches = false;

      # the lifeblood of development in NixOS
      programs.direnv.enable = mkDefault true;

      # some essential shell programs
      environment.systemPackages = with pkgs.unstable; [
        ripgrep
        jq
        eza
        bat
        gitui
        nix-search-cli
        fzf
      ];

      home.configFile.fish = {
        source = config.lib.vicos.dirFromConfig "fish";
        recursive = true;
      };

      home.configFile."fish/aliases.fish".text = let
        pregenWarning = ''
          # This file was autogenerated by NixOS. It's not editable directly.
          # Configure through ${config.vicos.flake.path} instead.
        '';
        mkAlias = name: cmd: ''
          function ${name}
            command ${cmd} $argv
          end
        '';
        aliases = mapAttrsToList mkAlias cfg.fish.aliases;
      in
        concatStringsSep "\n" ([pregenWarning] ++ aliases);

      home.configFile."fish/config.post.fish".text = concatStringsSep "\n" [
        cfg.fish.extraConfig
        ''
          ${optionalString cfg.starship.enable "starship init fish | source"}
          ${optionalString config.programs.direnv.enable "direnv hook fish | source"}
        ''
      ];
    }
    (mkIf cfg.fish.runByDefault {
      # We do this instead of setting fish as the login shell because it's not POSIX compliant
      # see https://fishshell.com/docs/current/index.html#default-shell
      programs.bash.interactiveShellInit = ''
        if [[ $(${pkgs.procps}/bin/ps --no-header --pid=$PPID --format=comm) != "fish" && -z ''${BASH_EXECUTION_STRING} ]]
        then
          shopt -q login_shell && LOGIN_OPTION='--login' || LOGIN_OPTION=""
          exec ${pkgs.fish}/bin/fish $LOGIN_OPTION
        fi
      '';
    })
    (mkIf cfg.starship.enable {
      vicos.user.packages = [
        pkgs.unstable.starship
      ];

      home.configFile."starship.toml".source = config.lib.vicos.fileFromConfig "starship.toml";
    })
  ];
}
